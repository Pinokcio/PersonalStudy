// 프로그램 실행 과정
- 프로그램은 일련의 명령어로 구성되어 있음
- 프로그램이 실행된다는 것
    1. 프로세서는 프로그램이 적재된 메모리로부터 명령어를 fetch해 옴
    2. 프로세서는 fetch 된 명령어를 decode 하여 어떤 명령어인지 확인
    3. decode 된 명령어를 실제로 execute 함 (ex. add, read/write, branch, jump, ...)
    4. 프로세서는 다음 명령어에 대하여 위의 과정을 반복함
 
Program Counter(PC)는 다음 fetch 할 명령어의 메모리 주소를 저장하고 있다.

프로세서는 단순히 프로그램이 주어지면 실행함.
운영체제는 사용자가 프로그램을 손쉽게 사용하고, memory/device 등의 자원을 이용할 수 있도록 하고
동시에 다수의 프로그램들이 자원을 공유할 수 있도록 함
-> 운영체제의 3가지 목적 : 가상화 / 병행성 / 영속성

// 가상화
- 프로세서, 메모리, 디스크 등의 physical resource를 가상형태로 만듦
  이점 : 정해진 규격이 존재하여 사용하기 손쉽고, 보다 다양한 기능을 제공한다.
  os는 이러한 특성때문에 가상 머신 (virtual machine)이라고도 부른다.

// Resource Manager
- 운영체제는 가상화 기법을 통해 다수의 프로그램이 physical resource를 "공유"할 수 있도록 한다.
  다수의 프로그램이 실행된다는 것 -> cpu를 공유
  다수의 프로그램이 자신만의 코드/데이터를 가질 수 있다는 것 -> 메모리를 공유
  다수의 프로그램이 파일을 읽고 쓸 수 있다는 것 -> 디스크를 공유
  
// 시스템 콜
- 운영체제는 프로그램에 "시스템 콜"이라는 일련의 API를 제공하여 가상화된 자원과 관련된 기능을 활용할 
  수 있도록 한다.
  
// 병행성 문제
- 멀티 쓰레드와 같은 상황에서 counter++과 같은 코드가 실제로는 여러개의 명령어로 이루어져있기 때문에
  명령어가 실행되는 순서가 뒤죽박죽 섞이게 되어 프로그래머가 의도한대로 코드가 실행되지 않게 됨.
  -> 해결하기 위해선 atomic한 명령어 셋을 이용하여 코드를 짜야한다.

// 영속성
- DRAM은 휘발성 저장장치인데, 많은 경우에서 프로그램의 데이터는 컴퓨터가 종료되어도 여전히 남아있어야
  한다. -> Persistency
- 이를 지원하기 위한 하드웨어 저장매체
  1. HDD
  2. SSD
  3. USB Flash Drive
- 운영체제는 프로그램이 이러한 저장매체를 이용할 수 이도록 "파일 시스템"(File System)을 제공한다.

// 파일시스템
- 저장장치의 어디에 데이터가 저장되어야/저장되어 있는지를 찾고 read/write와 같은 I/O명령을 저장장치에 전달
- 저널링과 같은 기법을 통해 갑작스러운 오류로부터 저장장치에 저장된 데이터를 보호하고 cache나
  copy-on-write(CoW)와 같은 기법을 통해 저장장치의 성능을 향상시키게 된다.
