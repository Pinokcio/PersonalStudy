* 파일 시스템
- 파일 시스템은 저장 장치에서 데이터를 쉽게 보관 및 접근할 수 있도록 하는 체계이다.
- 파일 시스템은 앞선 CPU/메모리 가상화 등과는 달리 하드웨어의 도움 없이 순수 소프트웨어로 구현된다.
- 여기서는 파일 시스템의 디스크 자료구조, 접근 방법, 정책 등을 학습하기 위한 목적으로 개발된 vsfs를 살펴본다.

@ 자료구조 - 파일시스템은 자신의 데이터와 메타데이터를 관리하기 위해 어떤 종류의 디스크 자료구조가 필요한가
@ 접근방법 - 프로세스가 호출하는 명령들은 파일시스템의 자료구조와 어떤 관련이 있는가

* 파일 시스템의 전체 구성
- 첫째로 디스크를 블록으로 나눈다
  > 간단한 파일 시스템은 단일 블록 크기를 사용하기 때문에, vsfs도 4kb의 단일 블록을 사용한다.
  > N개의 블록을 가지는 디스크 파티션에서 블록은 0~N-1까지의 주소를 가진다.
- 데이터 영역
  > 파일 시스템은 각 파일에 대한 정보
  > 파일 시스템은 이들 정보를 아이노드라고 부르는 자료 구조에 저장한다.

* 아이노드 테이블
- 아이노드를 저장하기 위해 확보된 디스크 공간 
  > 아이노드들이 배열 형태로 저장
  > 개별 아이노드는 128~256B 정도의 크기를 가진다.

* 슈퍼블록
- 슈퍼블록은 파일 시스템 전체에 대한 정보를 담고 있다.
  > 아이노드 및 데이터 블록의 수
  > 아이노드 테이블의 시작 위치
  > 파일 시스템 식별을 위한 매직 너머
- 슈퍼블록이 깨질 경우, 전체 파일 시스템이 훼손되므로, 대부분의 파일 시스템은 슈퍼블록을 여러곳에 복사해둔다.
  > 파일 시스템을 마운트 할 때, 운영체제는 슈퍼블록을 먼저 읽어서 파일을 읽거나 쓸 때 필요한 자료구조의 위치
    를 파악한다.
    
* 파일 구성 : 아이노드
- 인덱스 노드의 줄임말로서, 파일 시스템 내에서 가장 중요한 자료구조이다.
- 각 아이노드는 숫자인 아이넘버로 표현된다.
  > 파일 시스템은 아이넘버를 통해 아이노드의 위치를 계산한다.
  ex) 아이넘버 32 : 아이노드 테이블 내 오프셋 : (32*sizeof(inode)(256kb)) = 8192
                    아이노드의 위치 : 아이노드 테이블의 시작 위치 (12kb) + inode region (8kb) = 20 kb
                    디스크는 블록단위로 접근 가능 : 20k / 블록의 크기(512b) = 40
- 아이노드 설계에 있어서 가장 중요한 것은 데이터 블록의 위치를 가리키는 것이다.
- 가장 간단한 방법은 아이노드 내에 여러 개의 직접 포인터(direct pointer, 디스크주소)를 두는 것이다.
- 각 포인터는 파일의 디스크 블록 하나를 가리킨다.
- 그러나, 이 방법은 나타낼 수 있는 파일의 크기가 제한된다는 단점이 있다. => (포인터의 수 * 블록 크기)

* 멀티 레벨 인덱스
- 보다 큰 파일을 지원하기 위해 간접 포인터를 사용할 수 있다.
- 간접 포인터는 데이터 블록을 가리키지 않는다.
  > 대신 간접 포인터는 데이터 블록을 가리키는 포인터들이 모여 있는 블록을 가리킨다.
  > 아이노드에는 정해진 수의 직접 포인터(12개)와 함께 하나의 간접 포인터가 있다.
  > 큰 파일에 대해서 간접 블록이 할당되고, 아이노드의 간접 포인터는 이 간접 블록을 가리킨다.
  > 블록이 4kb이고 디스크 주소가 4b라고 하면, 1024개의 포인터를 추가할 수 있게 된다.
    => 이 경우, 최대 파인 크기는 (12+1024)*4k or 4144kb 가 된다.
  > 다만 4144kb는 큰 파일이 아니다.
  > 따라서, 좀 더 큰 파일을 위해서 아이노드에 이중 간접 포인터를 추가한다.
    => 4kb * 1024 * 1024 = 4GB
  > 이런식으로 간접 포인터 단계를 높이면 더 큰 파일에도 적용시킬 수 있게 된다.

* 익스텐트 (extent)
- etx4나 XFS 등의 파일 시스템에서는 익스텐트 방식을 사용한다.
- 익스텐트는 디스크 포인터 + 길이로 표현된다. (세그먼트와 유사)
- 익스텐트로 표현되는 공간은 연속적이어야만 한다.
  > 하나의 파일은 여러 개의 익스텐트로 나타나게 됨.
- 포인터와 익스텐트를 비교하면,
  > 포인터는 자유도가 높으나 메타데이터의 크기가 크다.
  > 익스텐트는 자유도가 낮지만, 좀 더 집약되어 있다.
- 익스텐트는 디스크 여유공간이 충분하고, 파일들을 연속으로 배치할 수 있을 때에 잘 동작하게 된다.

* 디렉토리 구조
- 디렉토리는 (항목의 이름, 아이넘버) 쌍의 배열로 구성
- 디렉토리의 데이터 블록의 구조는 다음과 같다.
  > 아이노드 번호
  > 레코드 길이 (이름에 사용된 총 바이트와 남은 공간의 합)
  > 문자열 길이 (실제 이름의 길이)
  > 항목의 이름
- 파일이 삭제되면 디렉토리 중간에 빈 공간이 발생한다.
  > 이 경우, 영역이 비었음을 표시할 수 있어야 한다.
    = 가령 아이넘버 0 은 빈 공간을 의미
  > 또한 빈 공간의 크기를 표시할 수 있어야 한다.
    = 이를 위해 레코드 크기가 존재한다.
- 디렉토리는 파일 시스템에서 특수한 종류의 파일로 간주된다.
  > 디렉토리는 자신의 아이노드를 가지며, 이 아이노드는 아이노드 테이블에 존재한다.
  > 디렉토리는 자신의 데이터 블록을 가지고 있으며, 이 위치는 아이노드에 명시되어 있다.
- 앞서 살펴본 배열 외에도 XFS 등에서는 B-tree로 디렉토리의 항목을 관리하기도 한다.

* 빈 공간 관리
- 파일 시스템은 아이노드와 데이터 블록 사용 여부를 관리해야 한다.
  > 그래야 새로운 파일이나 디렉토리의 할당을 위한 공간을 찾을 수 있다.
- 빈 공간 관리는 다양한 방법으로 가능하다.
  > 비트맵, 프리리스트, b-tree
  > 어떤 방식을 사용하든 공간과 시간 사이의 절충이 가능하다.
- 데이터 블록 할당 시, 가능한 여러 개의 블록이 연속적으로 비어 있는 공간을 할당한다.
  > 추후 할당 요청이 발생하면, 기존 할당 공간에 이어서 블록을 할당함으로써 해당 파일에 대한 입출력 성능
    을 개선하기 위해서이다.
    
* 캐싱과 버퍼링
- 파일을 읽고 쓰는 것은 많은 I/O를 발생시킨다.
  > 단적으로, 각 디렉토리 레벨마다 최소 두 번의 읽기(디렉토리 아이노드 및 디렉토리 데이터)가 필요하다.
  > 경로가 많은 디렉토리로 구성될 경우 수 백번의 읽기가 필요하다.
- 이를 개선하기 위해 파일 시스템은 자주 사용되는 블록들을 시스템의 메모리에 캐싱한다.
  > LRU나 기타 캐시 정책들을 사용한다.
  > 초기 파일 시스템에서는 캐싱을 위해 메모리의 10% 정도의 크기를 고정적으로 할당했다.
  > 그러나, 공간의 낭비가 크므로 현대의 시스템에서는 동적 파티션 방식을 이용한다.
- 캐싱 효과
  > 파일 열기
    = 첫 번째 열기는 디렉토리 아이노드 및 데이터로 인해 많은 I/O 발생
    = 그 뒤를 따르는 같은 파일 또는 같은 디렉토리의 파일들에 대한 열기의 경우 캐시로 인해 I/O 절감
  > 파일 읽기
    = 캐시가 크면 최초 읽기 이후 대부분의 읽기 I/O 제거 가능
  > 파일 쓰기
    = 영속성 유지를 위해, 해당 블록을 디스크로 내려야 한다.
    = 이 경우, 읽기와 달리 필터 역할을 할 수 없다.
    = 캐시는 쓰기 시점을 연기하는 역할을 한다. (쓰기 버퍼링, write buffering)
- 쓰기 버퍼링을 통해 성능 이득을 얻을 수 있다.
  > 쓰기 요청을 지연시켜 다수의 쓰기 작업을 적은 수의 I/O로 일괄처리 가능
  > 지연을 통해 쓰기 자체를 피할 수도 있음(ex. 파일 생성 후 즉시 삭제하는 경우)
- 많은 파일 시스템들이 쓰기 요청을 메모리에 약 5~30초가량 버퍼링한다.
  > 그러나, 이 경우 시스템의 크래시에 취약해진다.
  > 따라서 fsync() 시스템콜을 호출해 갱신 내용을 강제적으로 디렉토리에 기록할 수 있다.
