* 쓰레드
- 프로세스 내에서 실행 흐름을 나타내는 context
- 프로세스는 최소 1개의 쓰레드를 가진다.
- 프로그램의 실행 context를 나타낸다는 점에서 쓰레드는 프로세스와 유사하다
- 쓰레드와 프로세스의 다른 점은, 다수의 쓰레드가 하나의 프로세스에 속할 때, 프로세스의 주소 공간을 공유한다
  는 점이다.
  > 모두 동일한 code, heap을 보게 된다. 다만, 각자 다른 PC를 가지기 때문에 다른 실행 흐름을 가질 수 있다. 
    이에 대한 연장선으로, 각자 다른 stack을 가지게 된다.
    
* 쓰레드 간 Context-switch
- 운영체제는 쓰레드와 프로세스를 거의 동일하게 구현할 수 있다.
- 프로세스의 context는 PCB에 저장되며 쓰레드의 context는 TCB에 저장된다.
- PID를 통해 같은 자신이 속한 프로세스를 나타낼 수만 있다면, TCB는 PCB로 대체 가능하다.
- 쓰레드는 프로세스와 동일한 방식으로 Context-switch를 수행한다.
  > T_before의 context가 T_before의 TCB에 저장
  > T_after의 context가 T_after의 TCB로부터 복원
  > 둘 간에 주소 공간은 고유하므로 변경할 필요는 없다.

* 쓰레드 실행
- 쓰레드의 존재는 프로세스의 실행 흐름을 예측하기 어렵게 만든다.
  > 함수와 달리 쓰레드는 호출자와 "동시에" 실행된다.
- 또한 쓰레드 사이에는 데이터를 공유하기 때문에 예측은 더더욱 어려워진다.

* Race Condition
- 명령어의 실행 순서에 따라 결과가 달라지는 상황을 경쟁 조건(Race Condition)이라고 한다.
- Race는 컴퓨터가 비결정적하게 매 작동마다 다른 연산 결과가 나오도록 만든다.
- Race가 발생하는 코드 영역을 임계 영역(Critical Section)이라고 한다.
- 이를 해결하기 위해선 임계 영역에 상호 배제(Mutual Exclusion) 속성을 추가하여, 한 쓰레드가 임계 영역에
  있을 때, 다른 쓰레드가 진입하는 것을 막는 것이다.
  
! 원자성에 대한 바람
- 임계 영역 문제에 대한 해결책 중 하나는 명령어 하나로 의도한 동작을 수행하는 것(원자적으로)이다.
- 하드웨어가 원자성을 보장해 주기 때문에 실행 도중에 인터럽트가 발생하지 않으며 오직 동시에 하나의 쓰레드만 
  실행한다.
- 그러나 보다 일반적인 연산에 대한 대응책이 필요하다.
  > 일련의 연산을 "원자적"으로 실행
  > 일련의 연산을 동시에 하나의 쓰레드만 실행
  
* 쓰레드 관련 함수
- pthread_create(pthread_t*, const pthread_attr_t*, void * function, void * arg)
- pthread_joi(pthread_t, void ** value_ptr)

@ 위험한 코드 예시
- 쓰레드에서 포인터를 리턴할 때, 스택에 있는 오브젝트의 포인터를 반환해서는 안된다.
  > 스택은 함수의 리턴과 동시에 사라지기 때문에 쓰레드 뿐 아니라 일반 함수에서도 스택에 있는 오브젝트의
    포인터를 반환하는 것은 위험하다.
    
* 락 (Locks)
- 임계 영역에 대한 상호 배제 기능을 제공
ex) int pthread_mutex_lock(pthread_mutex_t * mutex) / int pthread_mutex_unlock(pthread_mutex_t * mutex)
- 락을 획득한 뮤텍스가 임계 영역에 진입했을 때, 다른 뮤텍스는 해당 임계 영역에 진입하지 못한다.
- 락 초기화 : PTHREAD_MUTEX_INITIALIZER / pthread_mutex_init(&lock, NULL)

* 컨디션 변수
- 쓰레드들 간에 신호(Signal)를 주고 받을 필요가 있을 때, 컨디션 변수가 활용된다.
  > 가령, 한 쓰레드에서 특정 작업을 완료 해야만 다른 쓰레드가 자신의 작업을 수행할 수 있다.
ex) pthread_cond_wait(pthread_cond_t * cond, pthread_mutex_t * mutex)
    phtread_cond_signal(pthread_cond_t * cond)
    pthread_cond_boradcast(pthread_cond_t * cond)
    pthread_cond_t init = PTHREAD_COND_INITIALIZER;
    pthread_cond_t init;
    pthread_cond_init(&init, NULL);
- 컨디션 변수가 Race Condition에 빠지는 것을 막기 위해서 이들 함수들은 반드시 락과 함께 사용되어야 한다.
- 컨디션 변수는 초기화 한 후 사용해야 한다.
