* 락(Lock)
- 락 변수는 락의 상태를 나타낸다.
- 락은
  > 사용 가능 상태 
    = 어떤 쓰레드도 이 락을 획득하지 않음.
    = 따라서, 이 락을 획득할 수 있다.
    = 락을 획득한 쓰레드는 소유자가 된다.
  > 사용중
    = 어떠한 쓰레드가 이 락을 획득하였다.
    = 해당 쓰레드는 아마도 임계 영역에 있을 것이다.
    
* lock() / unlock()
- 쓰레드가 락을 획득 및 해제하도록 한다.
  > 만약, 락의 획득에 성공한다면, 임계 영역에 진입하여 실행을 계속하게 된다.
  > 만약, 다른 쓰레드가 락을 소유하고 있어서, 락의 획득에 실패한다면, 락이 해제될 때까지 lock()함수에서
    벗어나지 않는다.
  > 획득한 락은 unlock()을 통해 해제할 수 있다.

* 락 구현
- 효율적인 락은 상호 배제를 적은 비용으로 제공한다.
- 효율적인 락은 멀티 쓰레드 프로그램의 성능 향상을 위해 필수적이다.
- 효율적인 락을 만들기 위해선 운영체제 및 하드웨어의 지원이 필요하다.

* 락의 평가
- 상호 배제 : 상호 배제를 제대로 지원하는가
- 공정성 : 쓰레드들에게 공정한 락 획득 기회가 주어지는가. 즉, 전혀 락을 얻지 못하는 Starve 쓰레드가 발생하지 않는가
- 성능 : 싱글 쓰레드 상태에서 락의 획득 및 해제에 발생하는 부하, 멀티 쓰레드 상태에서 락을 획득하려고 경쟁 할 때
  발생하는 부하는 각각 얼마나 되는가
  
* 싱글 프로세서 시스템에서는 임계 영역 내에서 인터럽트를 비활성화하는 것만으로 락을 구현할 수 있다.
- Pros : 단순하며 직관적이다.
- Cons : 쓰레드가 인터럽트 (비)활성화를 하는 특권을 가진다. (프로세스 독점 문제)
         멀티 프로세서에서는 동작하지 않는다.
         인터럽트를 장시간 비활성화 할 경우 중요한 인터럽트를 받지 못하게 될 수 있다.
         인터럽트 (비)활성화 명령어는 비효율적으로 동작하는 경우가 많다.
         
* flag 기반 락
- spin-wait을 통해 락 획득을 기다리는 방식을 채택
- 문제점 : 인터럽트 타이밍에 따라서 두개의 쓰레드가 모두 flag를 set 할 수 있다는 정확성 문제가 있다.
            > 상호 배제 실패
           성능 문제 - spin-wait은 CPU cycle을 낭비한다.
 
* Test-And-Set (Atomic Exchange)
- 오늘날 모든 시스템들이 락을 위한 하드웨어 지원을 가지고 있다.
- 가장 기본적인 하드웨어 기법은 Test-And-Set 명령어 또는 원자적 교체라고 불린다.
  int TestAndSet(int *ptr, int new){
    int old = *ptr;
    *ptr = new;
    return old;
  }
- ptr이 가지고 있던 예전 값을 반환하고, 새로운 값을 저장
- 이 모든 연산이 원자적으로 실행된다는 것이 하드웨어적으로 보장됨
- 정확성 : 상호 배제가 완벽하게 구현된다.
- 공정성 : 스핀락은 공정하지 않다. while 문에서 스핀되고 있는 쓰레드는 unlock이 호출될 때까지 벗어날 수 없다.
- 성능
  > 싱글 프로세서 환경에서 오버헤드는 상당하다.
  > N개의 쓰레드가 있을 때, 하나의 쓰레드가 락을 선점하면, N-1개의 쓰레드는 모두 스핀 상태에서 CPU를 낭비한다.
  > 다만 멀티 프로세서 환경에서 임계 영역이 짧은 경우에 쓰레드가 각각의 프로세서에서 동작하는 환경이라면,
    스핀 락은 꽤 효율적으로 동작한다.
    
* Compare-And-Swap
- 대상이 가리키고 있는 주소의 값이 기대하는 값과 같은지 검사하고, 같은 경우 새로운 값으로 변경, 다를 경우
   아무 것도 하지 않는다.
- Test-And-Set과 달리 Compare-And-Swap은 destination 값이 기대값과 같을 경우에만 new 값으로 변경된다.

* Fetch-And-Add
- 원자적으로 특정 주수의 값을 증가시키면서 예전 값을 반환한다.
- 이 명령어를 이용하여 티켓 락을 구현할 수 있다.
- 티켓 락은 쓰레드 간에 돌아가면서 락을 획득하도록 보장하기 때문에, 공정성 면에서 Test-And-Set보다 유리하다.

* 과도한 스핀
- 하드웨어 기반 스핀 락은 간단하며 잘 동작한다.
- 그러나 때로 비효율적으로 동작할 수 있는데, 가령 하나의 쓰레드가 락을 획득한 후, 임계 영역에서 인터럽트에
  걸려버리면, 다른 쓰레드들은 해당 쓰레드가 다시 실행을 재개할 때까지 스핀 상태에 있어야만 한다.
- 이러한 과도한 스핀을 해결하기 위해 운영체제의 지원이 필요하다.

* 무조건 양보
- 스핀 상태에 있을 때, CPU 시간을 다른 쓰레드 혹은 프로세스에 양보한다. > 불필요한 CPU 시간 소모를 막을 수 있다.
- 쓰레드가 많아짐에 따라 과도한 context-switch 오버헤드 발생
- 계속해서 락을 획득하지 못하는 기아 문제에 빠짐

* 스핀 대신 잠자기
- 앞선 방식들의 문제는 락의 획득 방법에 운이 너무 많이 개입한다는 것
- 이를 해결하기 위해 큐를 이용해 락을 획득하기 위해 대기하고 있는 쓰레드를 관리할 수 있다.
- park() / unpark() 사용, park()의 Wakeup/waiting race 문제를 해결하기 위해 setpark()를 추가.

* Futex
- 각 futex는 특정 물리 메모리 주소와 연결이 되어 있으며, 커널 내부의 큐를 가지고 있다.
- futex는 두 개의 인터페이스를 제공한다.
  > futex_wait : address와 기대한 값이 같으면, 호출한 쓰레드를 슬립시킨다. / address와 값이 기대한 값과
  같지 않으면, 즉시 리턴한다.
  > futex_wake : 큐에서 기다리고 있는 쓰레드 하나를 깨운다.

* 2단계 락
- 임계 영역이 짧은 등, 락이 곧 해제될 것 같을 경우엔(커널을 통해 쓰레드를 재우지 않는) 스핀 락이 효율적일 수 있다.
- First phase : 락을 획득하기를 기대하며 잠시 동안 스핀을 함. 만약, 락 획득에 실패할 경우 2단계로 넘어감
- Second phase : 해당 쓰레드는 슬립에 빠진다. 이후, 락을 획득할 수 있게 되었을 때 깨어나게 된다.

* 락 기반의 병행 자료 구조
- 병행 카운터
- 엉성한 카운터
- 병행 연결 리스트
- 병행 큐
- 병행 해시 테이블



